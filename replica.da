
import sys
import time
import random
import logging
import math
import random

from block_tree import VoteInfo, LedgerCommitInfo, VoteMsg, QC, Block
from timeout import TC, TimeoutInfo, TimeoutMsg, ProposalMsg
from ledger import Ledger
from utils import *
from tree import Tree
from cacheout import Cache
from collections import deque


config(channel='reliable')


class Replica(process):

    def setup(replica_id: str, replicas_ids: dict, client_ids: dict, private_key: str, public_key: str,
              replica_public_keys: dict, client_public_keys: dict, n_faulty_replicas: int,
              rand_seed: int, network_delta: float, window_size: int, exclude_size: int):
        self.n_replicas = len(replicas_ids)
        # run_done and round_done used for exiting of run method and timer logic respectively
        self.run_done = False
        self.round_done = False
        random.seed(rand_seed)

        # =====Pacemaker Variables=====
        self.current_round = 0
        self.last_round_tc = None
        self.pending_timeouts = {}

        # ======Mempool Variables======
        self.transaction_queue = deque()
        self.pending_transaction = set()
        self.req_cache = Cache()

        # ========Leader Election============
        self.validators = list(replicas_ids.keys())
        self.reputation_leaders = dict()

        # =========Block Tree =================
        self.high_qc = None
        self.high_commit_qc = None
        self.pending_votes = {}
        self.pending_block_tree = None

        # =================Safety=================
        self.__highest_vote_round = 0
        # initialize highest qc round to -1 for execution of genesis state
        self.__highest_qc_round = -1

        # ===========logging==============
        logging.basicConfig(filename="logs/"+str(replica_id)+".log",
                            filemode='a',
                            format='%(asctime)s %(levelname)s - %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.INFO)

    def initialize_variables():
        Config.replica_id = replica_id
        Config.n_replicas = n_replicas
        Config.window_size = self.window_size
        Config.private_key = private_key
        Config.replica_pub_keys = replica_public_keys
        # initialize ledger with genesis state in pending state tree and initialize commited blocks cache
        Ledger.initialize_ledger()
        # initialize high qc, high commit qc for genesis state
        high_qc = QC(VoteInfo("genesis_id", -1, "genesis_id", -2, "genesis_state"),
                     LedgerCommitInfo(None, ""), [sign_record("genesis", private_key)])
        high_commit_qc = QC(VoteInfo("genesis_id", -2, "genesis_id", -3, "genesis_state"),
                            LedgerCommitInfo(None, ""), [sign_record("genesis", private_key)])

        # Genesis block added to pending block tree initially
        genesis_block = Block(
            replica_id, 0, ["genesis_txn"], high_qc, "genesis_id")
        # initialize pending block tree with genesis block
        pending_block_tree = Tree(genesis_block)

    def run():
        logging.info("{} process is started".format(replica_id))
        run_done = False
        # initialize variables for Config used in utils for signatures and initialize ledger variables
        initialize_variables()

        while not run_done:
            round_done = False
            timer_duration = Pacemaker_get_round_timer(current_round)
            # await on round done which is set true when new round is started in Pacemaker_start_timer and Pacemaker_local_timeout_round
            # else timeout on timer duration set from Pacemaker round timer of current round
            if await(round_done):
                pass
            elif timeout(timer_duration):
                # if there are no pending transactions ie. every transaction is commited do not trigger local timeout or empty block are commited
                if len(pending_transaction) > 0:
                    Pacemaker_local_timeout_round()
        output("terminating ", replica_id)
        logging.warning('terminating')

    def receive(msg=("done",)):
        # terminate replica after receiving done
        run_done = True

    # fault injection uses setattr to change the replica's state.
    def setattr(attr, val):
        if attr == 'current_round':
            current_round = val
        elif attr == 'highest_vote_round':
            __highest_vote_round = val
        else:
            logging.error('Replica.setattr: unsupported attribute')

    # broadcasts messages to a client when a transaction of that client is committed
    def send_response(txn_id, m):
        client_id = txn_id[:txn_id.find('-')]
        sign_msg = str(random.random())+replica_id
        send(("response", self, replica_id, sign_record(
            sign_msg, private_key), (txn_id, m)), to={client_ids[client_id]})

    # broadcasts vote message to a specific replica
    def send_msg_replica(id, msg_type, m):
        sign_msg = str(random.random())+replica_id+msg_type
        send((msg_type, self, replica_id, sign_record(
            sign_msg, private_key), m), to={replicas_ids[id]})

    # broadcasts timeout messages and proposal messages to all replicas
    def broadcast_msg(msg_type, m):
        sign_msg = str(random.random())+replica_id+msg_type
        send((msg_type, self, replica_id, sign_record(
            sign_msg, private_key), m), to=set(replicas_ids.values()))

    # receives vote, timeout, proposal and client request messages from a specific replica or client
    def receive(msg=(msg_type, p, id, signature, m)):
        logging.info(
            "received msg of type = {} from id = {}".format(msg_type, id))
        if msg_type == "client_request":
            # If the request is from a client then it verifies the signature of the client and push the transaction to mempool
            if not verify_signature(signature, client_public_keys[id]):
                logging.error(
                    "signature not verified: msg of type = {} from id = {}".format(msg_type, id))
                return
            Mempool_push_transaction(m)
        elif msg_type == "local_timeout":
            # If the message is local timeout message then it verifies the signature of the sender and triggers Pacemaker_local_timeout_round
            if not verify_signature(signature, replica_public_keys[id]):
                logging.error(
                    "signature not verified: msg of type = {} from id = {}".format(msg_type, id))
                return
            Pacemaker_local_timeout_round()
        elif msg_type == "proposal_message":
            # If the message is a proposal message then it verifies the signature of the leader and then process the proposal message
            if not verify_signature(signature, replica_public_keys[id]) or not verify_signature(m.signature, replica_public_keys[m.sender]):
                logging.error(
                    "signature not verified: msg of type = {} from id = {}".format(msg_type, id))
                return
            Mempool_remove_txns(m.block.payload)
            process_proposal_msg(m)

        elif msg_type == "vote_message":
            # If the message is a vote message then it verifies the signature of the sender and then process the vote message
            if not verify_signature(signature, replica_public_keys[id]):
                logging.error(
                    "signature not verified: msg of type = {} from id = {}".format(msg_type, id))
                return
            process_vote_msg(m)

        elif msg_type == "timeout_message":
            # If the message is a timeout message then it verifies the signature of the sender and then process the timeout message
            if not verify_signature(signature, replica_public_keys[id]):
                logging.error(
                    "signature not verified: msg of type = {} from id = {}".format(msg_type, id))
                return
            process_timeout_msg(m)

    def process_certificate_qc(qc):
        # It verifies signatures of all the 2f+1 replicas that signs the qc and verifies the signature of the author
        if not validate_signatures(qc.signatures) or not verify_signature(qc.author_signature, replica_public_keys[qc.author]):
            logging.error("signature not verified")
            return

        BlockTree_process_qc(qc)

        LeaderElection_update_leaders(qc)
        Pacemaker_advance_round_qc(qc)

    def process_proposal_msg(P):

        process_certificate_qc(P.block.qc)
        process_certificate_qc(P.high_commit_qc)
        Pacemaker_advance_round_tc(P.last_round_tc)
        round = current_round
        leader = LeaderElection_get_leader(round)
        if P.block.round != round or P.sender != leader or P.block.author != leader:
            return

        BlockTree_execute_and_insert(P.block)

        vote_msg = Safety_make_vote(P.block, P.last_round_tc)

        if vote_msg is not None:
            logging.info("vote created for round = {}, by = {}, send to leader = {}".format(
                vote_msg.vote_info.round, vote_msg.sender, LeaderElection_get_leader(round + 1)))
            send_msg_replica(LeaderElection_get_leader(
                round + 1), "vote_message", vote_msg)

    def process_timeout_msg(M):

        if M.tmo_info:
            process_certificate_qc(M.tmo_info.high_qc)
        process_certificate_qc(M.high_commit_qc)
        Pacemaker_advance_round_tc(M.last_round_tc)
        tc = None
        if M.tmo_info:
            tc = Pacemaker_process_remote_timeout(M)

        if tc is not None:
            logging.info("TC created for round = {}".format(tc.round))
            Pacemaker_advance_round_tc(tc)
            process_new_round_event(tc)

    def process_vote_msg(M):
        # verifies the signature of the proposal message with its sender
        if not verify_signature(M.signature, replica_public_keys[M.sender]):
            logging.error("signature not verified")
            return
        qc = BlockTree_process_vote(M)

        if qc is not None:
            logging.info("QC created for round = {} and parent round = {}".format(
                qc.vote_info.round, qc.vote_info.parent_round))
            process_certificate_qc(qc)
            process_new_round_event(None)

    def process_new_round_event(last_tc):
        if replica_id == LeaderElection_get_leader(current_round):
            if len(pending_transaction) > 0:
                b = BlockTree_generate_block(
                    Mempool_get_transactions(), current_round)
                logging.info("Generated block for txn = {} in round = {} and broadcasted".format(
                    b.payload, b.round))
                broadcast_msg("proposal_message", ProposalMsg(
                    b, last_tc, high_commit_qc))

    # ============Peacemaker==============
    def Pacemaker_get_round_timer(r):  # need to implement this
        return 4*network_delta

    def Pacemaker_start_timer(new_round):
        current_round = new_round
        round_done = True
        logging.info("New round = {} started".format(new_round))

    def Pacemaker_local_timeout_round():
        logging.info(
            "Local timeout round triggered for round = {}".format(current_round))
        timeout_info = Safety_make_timeout(
            current_round, high_qc, last_round_tc)
        logging.info("Created Timeout Message for round = {} and broadcasted".format(
            timeout_info.round))
        broadcast_msg("timeout_message", TimeoutMsg(
            timeout_info, last_round_tc, high_commit_qc))
        round_done = True

    def Pacemaker_process_remote_timeout(tmo):  # need to remove f

        tmo_info = tmo.tmo_info

        if tmo_info.round < current_round:
            return None

        pending_timeouts.setdefault(tmo_info.round, set())
        if tmo_info.sender not in [x.sender for x in pending_timeouts[tmo_info.round]]:
            pending_timeouts[tmo_info.round].add(tmo_info)

        if len([x.sender for x in pending_timeouts[tmo_info.round]]) == n_faulty_replicas+1:
            Pacemaker_local_timeout_round()

        if len([x.sender for x in pending_timeouts[tmo_info.round]]) == 2*n_faulty_replicas+1:
            return TC(tmo_info.round, [x.high_qc.vote_info.round for x in pending_timeouts[tmo_info.round]], [x.signature for x in pending_timeouts[tmo_info.round]])

        return None

    def Pacemaker_advance_round_tc(tc):
        if tc is None or tc.round < current_round:
            return False
        last_round_tc = tc
        Pacemaker_start_timer(tc.round+1)
        return True

    def Pacemaker_advance_round_qc(qc):
        if qc.vote_info.round < current_round:
            return False
        last_round_tc = None
        Pacemaker_start_timer(qc.vote_info.round+1)
        return True
    # ==================MemPool==================

    def Mempool_get_transactions():
        if len(transaction_queue) == 0:
            return [""]
        txn = transaction_queue.popleft()
        while(txn in req_cache):
            txn = transaction_queue.popleft()
        txn_id = txn[:txn.find(':')]
        req_cache.add(txn_id, "processing")

        return [txn]

    def Mempool_push_transaction(txn):
        txn_id = txn[:txn.find(':')]
        if req_cache.has(txn_id):
            logging.info("Received duplicate transaction = {}".format(txn_id))
        if(not req_cache.has(txn_id)) or (req_cache.has(txn_id) and req_cache.get(txn_id) == "processing"):
            pending_transaction.add(txn_id)
            transaction_queue.append(txn)
            req_cache.add(txn_id, "queue")

        elif req_cache.get(txn_id) == "queue" or req_cache.get(txn_id) == "processed":
            send_response(txn_id, req_cache.get(txn_id, default=None))

    def Mempool_processed_txns(txns):
        for txn in txns:
            txn_id = txn[:txn.find(':')]
            req_cache.set(txn_id, "processed")
            pending_transaction.discard(txn_id)
            if txn_id and txn_id.find('-') > 0:
                send_response(txn_id, req_cache.get(txn_id, default=None))

    def Mempool_remove_txns(txns):
        for txn in txns:
            if txn in transaction_queue:
                transaction_queue.remove(txn)
                txn_id = txn[:txn.find(':')]
                req_cache.set(txn_id, "processing")

    # =============Leader election=============

    def LeaderElection_elect_reputation_leader(qc):

        active_validators = set()
        last_authors = set()
        current_qc = qc
        curr_window_size = 0
        while(curr_window_size < window_size or len(last_authors) < exclude_size):
            current_block = Ledger.committed_block(
                current_qc.vote_info.parent_id)
            if current_block is None:
                break
            block_author = current_block.author
            if curr_window_size < window_size:
                active_validators = active_validators.union(
                    get_signers(current_qc.signatures))
            if(len(last_authors) < exclude_size):
                last_authors.add(block_author)
            current_qc = current_block.qc
            curr_window_size += 1

        active_validators = active_validators-last_authors

        random.seed(qc.vote_info.round)

        if(len(active_validators) == 0):
            return None

        return random.choice(active_validators)

    def LeaderElection_update_leaders(qc):
        extended_round = qc.vote_info.parent_round
        qc_round = qc.vote_info.round
        current_round = current_round
        if extended_round+1 == qc_round and qc_round+1 == current_round:
            leader = LeaderElection_elect_reputation_leader(qc)
            if leader:
                logging.info("Leader = {} elected for round = {}".format(
                    leader, current_round+1))
                reputation_leaders[current_round+1] = leader

    def LeaderElection_get_leader(round):
        if round in reputation_leaders:
            return reputation_leaders[round]
        return validators[math.floor(round/2) % len(validators)]

    # ===========block tree ============

    def BlockTree_process_qc(qc):

        if qc.ledger_commit_info.commit_state_id is not None:
            Ledger.commit(pending_block_tree.get_block(qc.vote_info.parent_id))
            Mempool_processed_txns(pending_block_tree.get_block(
                qc.vote_info.parent_id).payload)
            pending_block_tree.prune(qc.vote_info.parent_id)
            if qc.vote_info.round > high_commit_qc.vote_info.round:
                high_commit_qc = qc
        if qc.vote_info.round > high_qc.vote_info.round:
            high_qc = qc

    def BlockTree_execute_and_insert(b):

        Ledger.speculate(b.qc.vote_info.id, b)

        pending_block_tree.add(b)

    def BlockTree_process_vote(v):
        BlockTree_process_qc(v.high_commit_qc)

        vote_idx = hash(v.ledger_commit_info)

        pending_votes.setdefault(vote_idx, set())
        pending_votes[vote_idx].add(v.signature)

        if len(pending_votes[vote_idx]) == 2*n_faulty_replicas+1:
            qc = QC(v.vote_info, v.ledger_commit_info,
                    list(pending_votes[vote_idx]))
            return qc
        return None

    def BlockTree_generate_block(txns, current_round):
        # need to implement it
        return Block(replica_id, current_round, txns, high_qc, hash((replica_id, current_round, txns, high_qc.vote_info.id, high_qc.signatures)))

    # ======================safety==================

    def __Safety_increase_highest_vote_round(round):
        __highest_vote_round = max(round, __highest_vote_round)

    def __Safety_update_highest_qc_round(qc_round):
        __highest_qc_round = max(qc_round, __highest_qc_round)

    def __Safety_consecutive(block_round, round):
        return round+1 == block_round

    def __Safety_safe_to_extend(block_round, qc_round, tc):
        return __Safety_consecutive(block_round, tc.round) and qc_round >= max(tc.tmo_high_qc_rounds)

    def __Safety_safe_to_vote(block_round, qc_round, tc):
        if block_round <= max(__highest_vote_round, qc_round):
            return False
        return __Safety_consecutive(block_round, qc_round) or __Safety_safe_to_extend(block_round, qc_round, tc)

    def __Safety_safe_to_timeout(round, qc_round, tc):
        if qc_round < __highest_qc_round or round <= max(__highest_vote_round-1, qc_round):
            return False
        return __Safety_consecutive(round, qc_round) or __Safety_consecutive(round, tc.round)

    def __Safety_commit_state_id_candidate(block_round, qc):
        if __Safety_consecutive(block_round, qc.vote_info.round):
            return Ledger.pending_state(qc.vote_info.id)
        else:
            return None

    def __Safety_valid_signatures(qc, tc):
        return validate_signatures(qc.signatures) and verify_signature(qc.author_signature, replica_public_keys[qc.author]) and (not tc or validate_signatures(tc.tmo_signatures))

    def Safety_make_vote(b, last_tc):
        qc_round = b.qc.vote_info.round
        if __Safety_valid_signatures(b.qc, last_tc) and __Safety_safe_to_vote(b.round, qc_round, last_tc):
            __Safety_update_highest_qc_round(qc_round)
            __Safety_increase_highest_vote_round(b.round)
            vote_info = VoteInfo(id=b.id, round=b.round, parent_id=b.qc.vote_info.id,
                                 parent_round=qc_round, state=Ledger.pending_state(b.id))
            ledger_commit_info = LedgerCommitInfo(commit_state_id=__Safety_commit_state_id_candidate(
                b.round, b.qc), vote_info_hash=hash(vote_info))
            return VoteMsg(vote_info, ledger_commit_info, high_commit_qc)
        return None

    def Safety_make_timeout(round, high_qc, last_tc):
        qc_round = high_qc.vote_info.round
        if __Safety_valid_signatures(high_qc, last_tc) and __Safety_safe_to_timeout(round, qc_round, last_tc):
            __Safety_increase_highest_vote_round(round)
            return TimeoutInfo(round, high_qc)
        return None

    # def to_string(self):
    #     return hash("".join(self.vote_info).join(self.ledger_commit_info.to_string()).join(self.signatures).join(self.author).join(self.author_signature))
