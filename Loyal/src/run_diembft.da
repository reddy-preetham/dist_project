import os
import shutil
from play_ground import PlayGround
import sys

sys.path.append('../config')

from client import Client
from config import configs
from cryptography import Cryptography
from validator import Validator
import json


class RunDiemBFT(process):

    def setup(config, config_id, num):
        file_name  = 'tests/test_case_'+str(num)+'.json'
        f = open(file_name)
        self.test_case= json.load(f)
        config['nvalidators'] = self.test_case["n_replicas"]
        config['nTwins'] = self.test_case["n_twins"]
        self.nvalidators = config['nvalidators']
        self.nclients = int(config['nclients'])
        self.nTwins = config['nTwins']

    def run():

        private_keys_validators = {}
        public_keys_validators = {}
        private_keys_clients = {}
        public_keys_clients = {}

        os.makedirs('../logs/config' + str(config_id) + '/test_case_' + str(num))
        os.makedirs('../ledgers/config' + str(config_id) + '/test_case_' + str(num))

        validators = new(Validator, num=nvalidators)
        clients = new(Client, num=nclients)
        play_ground = new(PlayGround, num =1)

        test_case = test_case["rounds"]
        leader_data = {}
        for key in test_case:
            leader_data[int(key)] = int(self.test_case[key]["leader"][8:])
        

        # private_key_play_ground, public_key_play_ground = Cryptography.generate_key()

        for v in validators:
            private_key, public_key = Cryptography.generate_key()
            private_keys_validators[v] = private_key
            public_keys_validators[v] = public_key

        for c in clients:
            private_key, public_key = Cryptography.generate_key()
            private_keys_clients[c] = private_key
            public_keys_clients[c] = public_key

        # print(leader_data)

        for i, v in enumerate(validators):
            setup({v}, (config, config_id, i, list(validators), list(clients),
                        private_keys_validators[v], public_keys_validators, public_keys_clients, play_ground, leader_data, False, num))

        for i, c in enumerate(clients):
            setup({c}, (config, config_id, i, list(validators),
                        private_keys_clients[c], public_keys_validators, play_ground, num))

        # start(validators)
        setup(play_ground, (config, config_id, list(clients), list(validators), public_keys_clients, private_keys_validators, public_keys_validators, nTwins, test_case, leader_data, num))

        start(clients)
        start(play_ground)
        self.validators=validators
        self.play_ground=play_ground
        self.clients = clients
        if await(each(c in clients, has=received(('Done',), from_=c))):
            output("All clients done, informing all validators.", config_id)
            await(timeout(1))
            send(('Done',), to=validators)
            send(('Done',), to=play_ground)

    def receive(msg=('Done', )):
        # if p==self.play_ground:
        print("-------------")
        send(('Done',), to=self.clients)


def is_config_valid(config):
    return True
    # if int(config['nvalidators']) < (3 * int(config['nfaulty']) + 1):
    #     print(
    #         "Number of validators should be more than thrice of number of faulty validators.")
    #     return False
    # if (int(config['nfaulty']) > int(config['exclude_size'])) or (int(config['exclude_size']) > 2 * int(config['nfaulty'])):
    #     print(
    #         "Exlude size should be between nfaulty and 2*nfaulty")
    #     return False
    # return True


def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    config_id = 0
    for config in configs:
        if not is_config_valid(config):
            output("The provided config", config,
                   "is not valid. Skipping this config.")
            continue
        for i in range(1):
            p = new(RunDiemBFT)
            setup(p, (config, config_id, i))
            start(p)
        config_id += 1
