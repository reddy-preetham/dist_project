# from main import *
from utils import *
NOPS=100
import sys
import time
import random



config(channel = 'reliable')
class Client(process):
    def setup(client_id:str,replicas:set,private_key:str,public_key:str,replica_public_keys:dict,n_req:int,n_faulty_replicas:int):
        self.cid = 0           # command id
        self.results = dict()  # map of command id to result of command
        self.count = dict()    # map of command id to number of responses

    def run():

        for i in range(n_req):
            req=str(client_id)+"-"+str(cid)+":"+str(random.randint(0, NOPS-1))
            # print(("====",sys.getsizeof((self,client_id,sign_record(req,private_key)))))
        
            send(('request', self,client_id,sign_record(req,private_key)), to= replicas)
            txn_id = str(client_id)+"-"+str(cid)
            results.setdefault(txn_id,set())
            # await(timeout(0.5))
            # --l1
            # await(len(results[txn_id])>n_faulty_replicas)
            cid += 1
        --l1
        await(each(txn_id in  results.keys(), has=len(results[txn_id]) >= n_faulty_replicas+1))
        # for txn_id in results.keys():
        #     --l1
            
        #     await(len(results[txn_id]) >= n_faulty_replicas+1)
        
        
        output('terminating')
        send(('done',), to=parent())

    
    def receive(msg= ('response', replica,replica_id,m),at=(l1,)):
        
        txn_id,m=verify_decode(m,replica_public_keys[replica_id])
        if m=="processed":
            results[txn_id].add(replica)
        # print(("received response from",replica,txn_id,m,len(results[txn_id])))
        debug('### response')
        

